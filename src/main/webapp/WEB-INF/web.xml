<?xml version="1.0" encoding="UTF-8"?>
<!--
    일반적으로 XML 선언은 XML 문서의 첫 번째 줄에 나타납니다.
    XML 선언은 필수 항목이 아니지만 사용할 경우 문서에서 첫 번째 줄이어야 하며
    그 앞에 다른 내용이나 공백이 없어야 합니다
-->
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
         version="6.0">
    <!--
        1. web.xml 파일의 서블릿 관련 부분은 웹 컨테이너에게 어떠한 URL 요청이 서블릿 요청이고
        그 서블릿 요청이 사용하는 서블릿 클래스는 어떤 것인지 알려주는 파일입니다.

        2. 이 파일을 DD(Deployment Descriptor:배치 서술자)라고 하는데 각 어플리케이션의 환경을 설정하는 부분을 담당합니다.

        3. WEB-INF 디렉토리에 위치합니다.

        4. <servlet></servlet> 태그로 묶인 부분이 각각의 서블릿에 대응하는 서블릿 클래스를 지정하는 부분입니다.
        <servlet-mapping></servlet-mapping>태그 부분은 URL 상의 요청명과 서블릿을 연결해 주는 부분입니다.

        5. <servlet-name> 태그로 묶인 부분은 서블릿의 이름을 배정한 부분이고
        <servlet-class>태그로 묶인 부분이 서블릿 이름에 대한 클래스를 명시해 놓은 부분입니다.

        6. <servlet-mapping>태그 안의 <servlet-name>은 반드시 <servlet>태그 안의 <servlet-name>과 일치해야 합니다.
        <url-pattern>태그로 묶인 부분이 <servlet-name>태그에 명시된 서블릿이 요청되기 위한 주소의 패턴을 입력하는 부분입니다.
        주소 지정시 "http://서버주소:포트번호/웹 애플리케이션이름"까지 생략하고 그 다음부터 지정합니다.

        브라우저에서 아래와 같이 입력하세요
        http://localhost:8088/JSP/start
    -->
    <servlet>
        <servlet-name>S_Test</servlet-name>
        <servlet-class>ex1._1.ServletTest</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>S_Test</servlet-name>
        <url-pattern>/start</url-pattern>
    </servlet-mapping>

    <!-- web.xml의 위치는 WEB-INF -->
    <!--
        1. 서블릿 규약은 웹 어플리케이션 전체에 걸쳐서 사용할 수 있는 초기화 파라미터를 제공합니다.
        2. 초기화 파라미터는 주로 웹 어플리케이션의 초기화 작업에 필요한 설정 정보를 지정하기 위해 사용됩니다.
        3. 예를 들어 데이터 베이스 연결과 관련된 설정 파일의 경로나 로깅 설정 파일,
        또는 웹 어플리케이션의 주요 속성 정보를 담고 있는 파일의 경로 등을 지정할 때 사용합니다.
        4. 아래와 같이 초기화 파라미터를 추가하게 되면 application 객체에서 제공하는 메서드를
        사용하여 초기화 파라미터를 JSP 페이지에서 사용할 수 있습니다.

        형식)
            <context-param>
                <description>파라미터 설명(필수 아님)</description>
                <param-name>파라미터 이름</param-name>
                <param-value>파라미터 값</param-value>
            </context-param>
    -->
    <!-- 파라미터 이름이 logEnabled이고 파라미터 값이 "true"인 초기화 파라미터 추가 -->
    <context-param>
        <description>로깅 여부</description>
        <param-name>logEnabled</param-name>
        <param-value>true</param-value>
    </context-param>

    <context-param>
        <description>디버깅 레벨</description>
        <param-name>debugLevel</param-name>
        <param-value>5</param-value>
    </context-param>

    <!--
        각각의 응답 상태 코드별로 보여줄 페이지를 지정합니다.
        <error-page> : 하나의 에러 페이지를 지정
        <error-code> : 에러 상태 코드 지정
        <location> : 에러 페이지의 위치를 지정
        <exception-type> : 예외 종류
    -->
<!--
    <error-page>
        <error-code>404</error-code>
        <location>/ex3_implicit_object/_6.exception/error/error404.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/ex3_implicit_object/_6.exception/error/error500.jsp</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.NullPointerException</exception-type>
        <location>/ex3_implicit_object/_6.exception/error/errorNullPointer.jsp</location>
    </error-page>
-->
    <context-param>
        <description>아이디</description>
        <param-name>id</param-name>
        <param-value>jsp</param-value>
    </context-param>
    <context-param>
        <description>비밀번호</description>
        <param-name>password</param-name>
        <param-value>jsp</param-value>
    </context-param>
</web-app>